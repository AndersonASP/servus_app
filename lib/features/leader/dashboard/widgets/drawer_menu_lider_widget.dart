import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:servus_app/core/enums/user_role.dart';
import 'package:servus_app/core/models/ministerio.dart';
import 'package:servus_app/core/theme/context_extension.dart';
import 'package:servus_app/state/auth_state.dart';
import 'package:servus_app/shared/widgets/drawer_profile_header.dart';

class DrawerMenuLider extends StatelessWidget {
  final Ministerio? ministerioSelecionado;
  final VoidCallback onTrocarModo;

  const DrawerMenuLider({
    super.key,
    required this.ministerioSelecionado,
    required this.onTrocarModo,
  });


  @override
  Widget build(BuildContext context) {
    final usuario = Provider.of<AuthState>(context, listen: false).usuario!;

    return Drawer(
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topRight: Radius.circular(16),
          bottomRight: Radius.circular(16),
        ),
      ),
      child: SafeArea(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            DrawerProfileHeader(
              nome: usuario.nome,
              email: usuario.email,
              picture: usuario.picture?.isNotEmpty == true ? usuario.picture! : '',
              onTapPerfil: () => context.push('/perfil'),
              exibirTrocaModo: true,
              modoAtual: _labelDoPapel(usuario.role),
            ),
            Divider(
              height: 10,
              thickness: 0.6,
              color: context.colors.onSurface.withValues(alpha: 0.2),
            ),

            const SizedBox(height: 16),

            // Menu de navega√ß√£o - Scroll√°vel
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 8),
                physics: const BouncingScrollPhysics(),
                child: Column(
                  children: [
                  // Dashboard
                  ListTile(
                    leading: const Icon(Icons.dashboard),
                    title: const Text('Dashboard'),
                    onTap: () {
                      Navigator.pop(context);
                      context.go('/leader/dashboard');
                    },
                  ),

                  // Minist√©rios (n√£o vis√≠vel para servus_admin)
                  if (usuario.role != UserRole.servus_admin)
                    ListTile(
                      leading: const Icon(Icons.groups),
                      title: Text(usuario.role == UserRole.leader ? 'Meu minist√©rio' : 'Minist√©rios'),
                      subtitle: Text(usuario.role == UserRole.leader ? 'Ver detalhes do meu minist√©rio' : 'Gerenciar minist√©rios'),
                      onTap: () {
                        // üîç LOGS DETALHADOS PARA DEBUG DO MENU "MEU MINIST√âRIO"
                        debugPrint('üéØ [DrawerMenu] ===== CLIQUE NO MENU MINIST√âRIO =====');
                        debugPrint('üîç [DrawerMenu] Usu√°rio logado:');
                        debugPrint('   - Nome: ${usuario.nome}');
                        debugPrint('   - Email: ${usuario.email}');
                        debugPrint('   - Role: ${usuario.role}');
                        debugPrint('   - √â l√≠der: ${usuario.isLider}');
                        debugPrint('   - √â volunt√°rio: ${usuario.isVoluntario}');
                        debugPrint('   - Minist√©rio principal ID: ${usuario.primaryMinistryId}');
                        debugPrint('   - Minist√©rio principal nome: ${usuario.primaryMinistryName}');
                        debugPrint('   - Tenant ID: ${usuario.tenantId}');
                        debugPrint('   - Branch ID: ${usuario.branchId}');
                        debugPrint('üîç [DrawerMenu] Context mounted? ${context.mounted}');
                        
                        Navigator.pop(context);
                        debugPrint('üîç [DrawerMenu] Drawer fechado');
                        
                        if (usuario.role == UserRole.leader) {
                          debugPrint('üéØ [DrawerMenu] USU√ÅRIO √â L√çDER - Navegando para minist√©rio do l√≠der');
                          
                          // üÜï Usar o minist√©rio principal do usu√°rio
                          if (usuario.primaryMinistryId != null) {
                            final ministryId = usuario.primaryMinistryId!;
                            final route = '/leader/ministerio-detalhes/$ministryId';
                            debugPrint('‚úÖ [DrawerMenu] Minist√©rio principal encontrado:');
                            debugPrint('   - ID: $ministryId');
                            debugPrint('   - Nome: ${usuario.primaryMinistryName}');
                            debugPrint('   - Rota: $route');
                            context.push(route);
                            debugPrint('‚úÖ [DrawerMenu] Navega√ß√£o executada para minist√©rio principal');
                          } else {
                            // Fallback para ID fixo se n√£o houver minist√©rio principal
                            const fallbackId = '68d1b58da422169502e5e765';
                            const fallbackRoute = '/leader/ministerio-detalhes/$fallbackId';
                            debugPrint('‚ö†Ô∏è [DrawerMenu] PROBLEMA: Minist√©rio principal n√£o encontrado!');
                            debugPrint('   - primaryMinistryId √© null');
                            debugPrint('   - Usando fallback ID: $fallbackId');
                            debugPrint('   - Rota fallback: $fallbackRoute');
                            context.push(fallbackRoute);
                            debugPrint('‚ö†Ô∏è [DrawerMenu] Navega√ß√£o executada com fallback');
                          }
                        } else {
                          debugPrint('üîç [DrawerMenu] Usu√°rio n√£o √© l√≠der, navegando para lista de minist√©rios');
                          debugPrint('   - Role atual: ${usuario.role}');
                          debugPrint('   - Rota: /leader/ministerio/lista');
                          context.push('/leader/ministerio/lista');
                          debugPrint('‚úÖ [DrawerMenu] Navega√ß√£o para lista executada');
                        }
                        
                        debugPrint('üéØ [DrawerMenu] ===== FIM DO CLIQUE NO MENU MINIST√âRIO =====');
                      },
                    ),


                  // Membros (vis√≠vel apenas para tenant_admin e branch_admin)
                  if (usuario.role == UserRole.tenant_admin ||
                      usuario.role == UserRole.branch_admin)
                    ListTile(
                      leading: const Icon(Icons.group_add),
                      title: const Text('Membros'),
                      subtitle: const Text('Gerenciar membros'),
                      onTap: () {
                        Navigator.pop(context);
                        context.push('/leader/members');
                      },
                    ),

                  // Volunt√°rios (vis√≠vel para leader, tenant_admin e branch_admin)
                  if (usuario.role == UserRole.leader ||
                      usuario.role == UserRole.tenant_admin ||
                      usuario.role == UserRole.branch_admin)
                    ListTile(
                      leading: const Icon(Icons.people),
                      title: const Text('Volunt√°rios'),
                      subtitle: const Text('Gerenciar volunt√°rios'),
                      onTap: () {
                        Navigator.pop(context);
                        context.go('/leader/dashboard/voluntarios');
                      },
                    ),

                  // Formul√°rios (vis√≠vel apenas para tenant_admin e branch_admin)
                  if (usuario.role == UserRole.tenant_admin ||
                      usuario.role == UserRole.branch_admin)
                    ListTile(
                      leading: const Icon(Icons.assignment),
                      title: const Text('Formul√°rios'),
                      subtitle: const Text('Criar e gerenciar'),
                      onTap: () {
                        Navigator.pop(context);
                        context.push('/forms');
                      },
                    ),
                  // Criar Tenants (apenas para ServusAdmin)
                  if (usuario.role == UserRole.servus_admin)
                    ListTile(
                      leading: const Icon(Icons.business),
                      title: const Text('Nova igreja'),
                      subtitle: const Text('Nova organiza√ß√£o'),
                      onTap: () {
                        Navigator.pop(context);
                        context.push('/leader/tenants/create');
                      },
                    ),

                  // Escalas (n√£o vis√≠vel para servus_admin)
                  if (usuario.role != UserRole.servus_admin)
                    ListTile(
                      leading: const Icon(Icons.schedule),
                      title: const Text('Escalas'),
                      subtitle: const Text('Gerenciar escalas'),
                      onTap: () {
                        Navigator.pop(context);
                        context.push('/leader/escalas');
                      },
                    ),

                  // Eventos (n√£o vis√≠vel para servus_admin)
                  if (usuario.role != UserRole.servus_admin)
                    ListTile(
                      leading: const Icon(Icons.event),
                      title: const Text('Eventos'),
                      subtitle: const Text('Gerenciar eventos'),
                      onTap: () {
                        Navigator.pop(context);
                        context.go('/leader/eventos');
                      },
                    ),

                  // Templates (n√£o vis√≠vel para servus_admin)
                  if (usuario.role != UserRole.servus_admin)
                    ListTile(
                      leading: const Icon(Icons.copy),
                      title: const Text('Templates'),
                      subtitle: const Text('Modelos de escala'),
                      onTap: () {
                        Navigator.pop(context);
                        context.go('/leader/templates');
                      },
                    ),

                  ],
                ),
              ),
            ),

            // Rodap√© fixo
            Divider(
              height: 10,
              thickness: 0.6,
              color: context.colors.onSurface.withValues(alpha: 0.2),
            ),
            if (usuario.role == UserRole.tenant_admin ||
                usuario.role == UserRole.branch_admin ||
                usuario.role == UserRole.leader)
              ListTile(
                leading: const Icon(Icons.swap_horiz),
                title: const Text('Trocar para volunt√°rio'),
                onTap: onTrocarModo,
              ),
            const SizedBox(height: 24),
          ],
        ),
      ),
    );
  }

  String _labelDoPapel(UserRole role) {
    switch (role) {
      case UserRole.servus_admin:
        return 'Servus Admin';
      case UserRole.tenant_admin:
        return 'Admin da Igreja';
      case UserRole.branch_admin:
        return 'Admin da Filial';
      case UserRole.leader:
        return 'L√≠der';
      case UserRole.volunteer:
        return 'Volunt√°rio';
    }
  }
}
